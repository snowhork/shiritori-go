// Code generated by goa v3.2.6, DO NOT EDIT.
//
// shiritori HTTP client CLI support package
//
// Command:
// $ goa gen shiritori/design

package client

import (
	"fmt"
	shiritori "shiritori/gen/shiritori"
	"strconv"
)

// BuildAddPayload builds the payload for the shiritori add endpoint from CLI
// flags.
func BuildAddPayload(shiritoriAddA string, shiritoriAddB string) (*shiritori.AddPayload, error) {
	var err error
	var a int
	{
		var v int64
		v, err = strconv.ParseInt(shiritoriAddA, 10, 64)
		a = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for a, must be INT")
		}
	}
	var b int
	{
		var v int64
		v, err = strconv.ParseInt(shiritoriAddB, 10, 64)
		b = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for b, must be INT")
		}
	}
	v := &shiritori.AddPayload{}
	v.A = a
	v.B = b

	return v, nil
}

// BuildWordsPayload builds the payload for the shiritori words endpoint from
// CLI flags.
func BuildWordsPayload(shiritoriWordsWord string) (*shiritori.WordsPayload, error) {
	var word string
	{
		word = shiritoriWordsWord
	}
	v := &shiritori.WordsPayload{}
	v.Word = word

	return v, nil
}

// BuildBattlePayload builds the payload for the shiritori battle endpoint from
// CLI flags.
func BuildBattlePayload(shiritoriBattleBattleID string) (*shiritori.BattlePayload, error) {
	var battleID string
	{
		battleID = shiritoriBattleBattleID
	}
	v := &shiritori.BattlePayload{}
	v.BattleID = battleID

	return v, nil
}
