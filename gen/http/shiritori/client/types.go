// Code generated by goa v3.2.6, DO NOT EDIT.
//
// shiritori HTTP client types
//
// Command:
// $ goa gen shiritori/design

package client

import (
	shiritori "shiritori/gen/shiritori"
	shiritoriviews "shiritori/gen/shiritori/views"
)

// BattleStreamingBody is the type of the "shiritori" service "battle" endpoint
// HTTP request body.
type BattleStreamingBody BattlemessageStreamingBody

// WordsResponseBody is the type of the "shiritori" service "words" endpoint
// HTTP response body.
type WordsResponseBody struct {
	Word   *string `form:"word,omitempty" json:"word,omitempty" xml:"word,omitempty"`
	Exists *bool   `form:"exists,omitempty" json:"exists,omitempty" xml:"exists,omitempty"`
	Hash   *string `form:"hash,omitempty" json:"hash,omitempty" xml:"hash,omitempty"`
}

// BattleResponseBody is the type of the "shiritori" service "battle" endpoint
// HTTP response body.
type BattleResponseBody struct {
	BattleID *string `form:"battleId,omitempty" json:"battleId,omitempty" xml:"battleId,omitempty"`
	Name     *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Param    *string `form:"param,omitempty" json:"param,omitempty" xml:"param,omitempty"`
}

// BattlemessageStreamingBody is used to define fields on request body types.
type BattlemessageStreamingBody struct {
	Type string  `form:"type" json:"type" xml:"type"`
	Msg  *string `form:"msg,omitempty" json:"msg,omitempty" xml:"msg,omitempty"`
	Data *string `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// NewBattleStreamingBody builds the HTTP request body from the payload of the
// "battle" endpoint of the "shiritori" service.
func NewBattleStreamingBody(p *shiritori.Battlemessage) *BattleStreamingBody {
	body := &BattleStreamingBody{
		Type: &p.Type,
		Msg:  p.Msg,
		Data: p.Data,
	}
	return body
}

// NewWordsWordresultOK builds a "shiritori" service "words" endpoint result
// from a HTTP "OK" response.
func NewWordsWordresultOK(body *WordsResponseBody) *shiritoriviews.WordresultView {
	v := &shiritoriviews.WordresultView{
		Word:   body.Word,
		Exists: body.Exists,
		Hash:   body.Hash,
	}

	return v
}

// NewBattleeventViewOK builds a "shiritori" service "battle" endpoint result
// from a HTTP "OK" response.
func NewBattleeventViewOK(body *BattleResponseBody) *shiritoriviews.BattleeventView {
	v := &shiritoriviews.BattleeventView{
		BattleID: body.BattleID,
		Name:     body.Name,
		Param:    body.Param,
	}

	return v
}
