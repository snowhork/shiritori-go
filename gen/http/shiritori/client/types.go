// Code generated by goa v3.2.6, DO NOT EDIT.
//
// shiritori HTTP client types
//
// Command:
// $ goa gen shiritori/design

package client

import (
	shiritori "shiritori/gen/shiritori"
	shiritoriviews "shiritori/gen/shiritori/views"

	goa "goa.design/goa/v3/pkg"
)

// BattleStreamingBody is the type of the "shiritori" service "battle" endpoint
// HTTP request body.
type BattleStreamingBody BattlestreamingpayloadStreamingBody

// WordsResponseBody is the type of the "shiritori" service "words" endpoint
// HTTP response body.
type WordsResponseBody struct {
	Word   *string `form:"word,omitempty" json:"word,omitempty" xml:"word,omitempty"`
	Exists *bool   `form:"exists,omitempty" json:"exists,omitempty" xml:"exists,omitempty"`
	Hash   *string `form:"hash,omitempty" json:"hash,omitempty" xml:"hash,omitempty"`
}

// BattleResponseBody is the type of the "shiritori" service "battle" endpoint
// HTTP response body.
type BattleResponseBody struct {
	Type           *string                     `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	Timestamp      *int64                      `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	MessagePayload *MessagePayloadResponseBody `form:"message_payload,omitempty" json:"message_payload,omitempty" xml:"message_payload,omitempty"`
}

// BattlestreamingpayloadStreamingBody is used to define fields on request body
// types.
type BattlestreamingpayloadStreamingBody struct {
	Type           string                       `form:"type" json:"type" xml:"type"`
	MessagePayload *MessagePayloadStreamingBody `form:"message_payload,omitempty" json:"message_payload,omitempty" xml:"message_payload,omitempty"`
}

// MessagePayloadStreamingBody is used to define fields on request body types.
type MessagePayloadStreamingBody struct {
	Message string `form:"message" json:"message" xml:"message"`
}

// MessagePayloadResponseBody is used to define fields on response body types.
type MessagePayloadResponseBody struct {
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// NewBattleStreamingBody builds the HTTP request body from the payload of the
// "battle" endpoint of the "shiritori" service.
func NewBattleStreamingBody(p *shiritori.Battlestreamingpayload) *BattleStreamingBody {
	body := &BattleStreamingBody{
		Type: &p.Type,
	}
	if p.MessagePayload != nil {
		body.MessagePayload = marshalShiritoriMessagePayloadToMessagePayloadStreamingBody(p.MessagePayload)
	}
	return body
}

// NewWordsWordresultOK builds a "shiritori" service "words" endpoint result
// from a HTTP "OK" response.
func NewWordsWordresultOK(body *WordsResponseBody) *shiritoriviews.WordresultView {
	v := &shiritoriviews.WordresultView{
		Word:   body.Word,
		Exists: body.Exists,
		Hash:   body.Hash,
	}

	return v
}

// NewBattlestreamingresultViewOK builds a "shiritori" service "battle"
// endpoint result from a HTTP "OK" response.
func NewBattlestreamingresultViewOK(body *BattleResponseBody) *shiritoriviews.BattlestreamingresultView {
	v := &shiritoriviews.BattlestreamingresultView{
		Type:      body.Type,
		Timestamp: body.Timestamp,
	}
	if body.MessagePayload != nil {
		v.MessagePayload = unmarshalMessagePayloadResponseBodyToShiritoriviewsMessagePayloadView(body.MessagePayload)
	}

	return v
}

// ValidateBattlestreamingpayloadStreamingBody runs the validations defined on
// BattlestreamingpayloadStreamingBody
func ValidateBattlestreamingpayloadStreamingBody(body *BattlestreamingpayloadStreamingBody) (err error) {
	if !(body.Type == "message" || body.Type == "close" || body.Type == "post_word") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []interface{}{"message", "close", "post_word"}))
	}
	return
}

// ValidateMessagePayloadResponseBody runs the validations defined on
// MessagePayloadResponseBody
func ValidateMessagePayloadResponseBody(body *MessagePayloadResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}
