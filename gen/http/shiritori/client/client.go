// Code generated by goa v3.2.6, DO NOT EDIT.
//
// shiritori client HTTP transport
//
// Command:
// $ goa gen shiritori/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the shiritori service endpoint HTTP clients.
type Client struct {
	// Add Doer is the HTTP client used to make requests to the add endpoint.
	AddDoer goahttp.Doer

	// Words Doer is the HTTP client used to make requests to the words endpoint.
	WordsDoer goahttp.Doer

	// Battle Doer is the HTTP client used to make requests to the battle endpoint.
	BattleDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme     string
	host       string
	encoder    func(*http.Request) goahttp.Encoder
	decoder    func(*http.Response) goahttp.Decoder
	dialer     goahttp.Dialer
	configurer *ConnConfigurer
}

// NewClient instantiates HTTP clients for all the shiritori service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
	dialer goahttp.Dialer,
	cfn *ConnConfigurer,
) *Client {
	if cfn == nil {
		cfn = &ConnConfigurer{}
	}
	return &Client{
		AddDoer:             doer,
		WordsDoer:           doer,
		BattleDoer:          doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
		dialer:              dialer,
		configurer:          cfn,
	}
}

// Add returns an endpoint that makes HTTP requests to the shiritori service
// add server.
func (c *Client) Add() goa.Endpoint {
	var (
		decodeResponse = DecodeAddResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAddRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("shiritori", "add", err)
		}
		return decodeResponse(resp)
	}
}

// Words returns an endpoint that makes HTTP requests to the shiritori service
// words server.
func (c *Client) Words() goa.Endpoint {
	var (
		decodeResponse = DecodeWordsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildWordsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.WordsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("shiritori", "words", err)
		}
		return decodeResponse(resp)
	}
}

// Battle returns an endpoint that makes HTTP requests to the shiritori service
// battle server.
func (c *Client) Battle() goa.Endpoint {
	var (
		decodeResponse = DecodeBattleResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildBattleRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("shiritori", "battle", err)
		}
		if c.configurer.BattleFn != nil {
			conn = c.configurer.BattleFn(conn, cancel)
		}
		stream := &BattleClientStream{conn: conn}
		view := resp.Header.Get("goa-view")
		stream.SetView(view)
		return stream, nil
	}
}
