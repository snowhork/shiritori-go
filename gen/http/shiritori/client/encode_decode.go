// Code generated by goa v3.2.6, DO NOT EDIT.
//
// shiritori HTTP client encoders and decoders
//
// Command:
// $ goa gen shiritori/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	shiritori "shiritori/gen/shiritori"
	shiritoriviews "shiritori/gen/shiritori/views"

	goahttp "goa.design/goa/v3/http"
)

// BuildAddRequest instantiates a HTTP request object with method and path set
// to call the "shiritori" service "add" endpoint
func (c *Client) BuildAddRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		a int
		b int
	)
	{
		p, ok := v.(*shiritori.AddPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("shiritori", "add", "*shiritori.AddPayload", v)
		}
		a = p.A
		b = p.B
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddShiritoriPath(a, b)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("shiritori", "add", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeAddResponse returns a decoder for responses returned by the shiritori
// add endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeAddResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body int
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("shiritori", "add", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("shiritori", "add", resp.StatusCode, string(body))
		}
	}
}

// BuildWordsRequest instantiates a HTTP request object with method and path
// set to call the "shiritori" service "words" endpoint
func (c *Client) BuildWordsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		word string
	)
	{
		p, ok := v.(*shiritori.WordsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("shiritori", "words", "*shiritori.WordsPayload", v)
		}
		word = p.Word
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: WordsShiritoriPath(word)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("shiritori", "words", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeWordsResponse returns a decoder for responses returned by the
// shiritori words endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeWordsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body WordsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("shiritori", "words", err)
			}
			p := NewWordsWordresultOK(&body)
			view := "default"
			vres := &shiritoriviews.Wordresult{Projected: p, View: view}
			if err = shiritoriviews.ValidateWordresult(vres); err != nil {
				return nil, goahttp.ErrValidationError("shiritori", "words", err)
			}
			res := shiritori.NewWordresult(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("shiritori", "words", resp.StatusCode, string(body))
		}
	}
}

// BuildBattleRequest instantiates a HTTP request object with method and path
// set to call the "shiritori" service "battle" endpoint
func (c *Client) BuildBattleRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		battleID string
	)
	{
		p, ok := v.(*shiritori.BattlePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("shiritori", "battle", "*shiritori.BattlePayload", v)
		}
		battleID = p.BattleID
	}
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: BattleShiritoriPath(battleID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("shiritori", "battle", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeBattleResponse returns a decoder for responses returned by the
// shiritori battle endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeBattleResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body BattleResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("shiritori", "battle", err)
			}
			p := NewBattlestreamingresultViewOK(&body)
			view := "default"
			vres := &shiritoriviews.Battlestreamingresult{Projected: p, View: view}
			if err = shiritoriviews.ValidateBattlestreamingresult(vres); err != nil {
				return nil, goahttp.ErrValidationError("shiritori", "battle", err)
			}
			res := shiritori.NewBattlestreamingresult(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("shiritori", "battle", resp.StatusCode, string(body))
		}
	}
}

// unmarshalMessagePayloadResponseBodyToShiritoriviewsMessagePayloadView builds
// a value of type *shiritoriviews.MessagePayloadView from a value of type
// *MessagePayloadResponseBody.
func unmarshalMessagePayloadResponseBodyToShiritoriviewsMessagePayloadView(v *MessagePayloadResponseBody) *shiritoriviews.MessagePayloadView {
	if v == nil {
		return nil
	}
	res := &shiritoriviews.MessagePayloadView{
		Message: v.Message,
	}

	return res
}

// marshalShiritoriMessagePayloadToMessagePayloadStreamingBody builds a value
// of type *MessagePayloadStreamingBody from a value of type
// *shiritori.MessagePayload.
func marshalShiritoriMessagePayloadToMessagePayloadStreamingBody(v *shiritori.MessagePayload) *MessagePayloadStreamingBody {
	if v == nil {
		return nil
	}
	res := &MessagePayloadStreamingBody{
		Message: v.Message,
	}

	return res
}
