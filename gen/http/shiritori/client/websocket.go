// Code generated by goa v3.2.6, DO NOT EDIT.
//
// shiritori WebSocket client streaming
//
// Command:
// $ goa gen shiritori/design

package client

import (
	"io"
	shiritori "shiritori/gen/shiritori"
	shiritoriviews "shiritori/gen/shiritori/views"

	"github.com/gorilla/websocket"
	goahttp "goa.design/goa/v3/http"
)

// ConnConfigurer holds the websocket connection configurer functions for the
// streaming endpoints in "shiritori" service.
type ConnConfigurer struct {
	BattleFn goahttp.ConnConfigureFunc
}

// BattleClientStream implements the shiritori.BattleClientStream interface.
type BattleClientStream struct {
	// conn is the underlying websocket connection.
	conn *websocket.Conn
	// view is the view to render shiritori.Battlemessage result type before
	// sending to the websocket connection.
	view string
}

// NewConnConfigurer initializes the websocket connection configurer function
// with fn for all the streaming endpoints in "shiritori" service.
func NewConnConfigurer(fn goahttp.ConnConfigureFunc) *ConnConfigurer {
	return &ConnConfigurer{
		BattleFn: fn,
	}
}

// Recv reads instances of "shiritori.Battleevent" from the "battle" endpoint
// websocket connection.
func (s *BattleClientStream) Recv() (*shiritori.Battleevent, error) {
	var (
		rv   *shiritori.Battleevent
		body BattleResponseBody
		err  error
	)
	err = s.conn.ReadJSON(&body)
	if websocket.IsCloseError(err, websocket.CloseNormalClosure) {
		return rv, io.EOF
	}
	if err != nil {
		return rv, err
	}
	res := NewBattleeventViewOK(&body)
	vres := &shiritoriviews.Battleevent{res, s.view}
	if err := shiritoriviews.ValidateBattleevent(vres); err != nil {
		return rv, goahttp.ErrValidationError("shiritori", "battle", err)
	}
	return shiritori.NewBattleevent(vres), nil
}

// Send streams instances of "shiritori.Battlemessage" to the "battle" endpoint
// websocket connection.
func (s *BattleClientStream) Send(v *shiritori.Battlemessage) error {
	body := NewBattleStreamingBody(v)
	return s.conn.WriteJSON(body)
}

// Close closes the "battle" endpoint websocket connection.
func (s *BattleClientStream) Close() error {
	var err error
	// Send a nil payload to the server implying client closing connection.
	if err = s.conn.WriteJSON(nil); err != nil {
		return err
	}
	return s.conn.Close()
}

// SetView sets the view to render the shiritori.Battlemessage type before
// sending to the "battle" endpoint websocket connection.
func (s *BattleClientStream) SetView(view string) {
	s.view = view
}
