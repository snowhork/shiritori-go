// Code generated by goa v3.2.6, DO NOT EDIT.
//
// shiritori HTTP server encoders and decoders
//
// Command:
// $ goa gen shiritori/design

package server

import (
	"context"
	"net/http"
	shiritori "shiritori/gen/shiritori"
	shiritoriviews "shiritori/gen/shiritori/views"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAddResponse returns an encoder for responses returned by the shiritori
// add endpoint.
func EncodeAddResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(int)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAddRequest returns a decoder for requests sent to the shiritori add
// endpoint.
func DecodeAddRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			a   int
			b   int
			err error

			params = mux.Vars(r)
		)
		{
			aRaw := params["a"]
			v, err2 := strconv.ParseInt(aRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("a", aRaw, "integer"))
			}
			a = int(v)
		}
		{
			bRaw := params["b"]
			v, err2 := strconv.ParseInt(bRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("b", bRaw, "integer"))
			}
			b = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewAddPayload(a, b)

		return payload, nil
	}
}

// EncodeWordsResponse returns an encoder for responses returned by the
// shiritori words endpoint.
func EncodeWordsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*shiritoriviews.Wordresult)
		enc := encoder(ctx, w)
		body := NewWordsResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeWordsRequest returns a decoder for requests sent to the shiritori
// words endpoint.
func DecodeWordsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			word string

			params = mux.Vars(r)
		)
		word = params["word"]
		payload := NewWordsPayload(word)

		return payload, nil
	}
}

// DecodeBattleRequest returns a decoder for requests sent to the shiritori
// battle endpoint.
func DecodeBattleRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			battleID string
			userID   string

			params = mux.Vars(r)
		)
		battleID = params["battleId"]
		userID = params["userId"]
		payload := NewBattlePayload(battleID, userID)

		return payload, nil
	}
}

// marshalShiritoriviewsMessagePayloadViewToMessagePayloadResponseBody builds a
// value of type *MessagePayloadResponseBody from a value of type
// *shiritoriviews.MessagePayloadView.
func marshalShiritoriviewsMessagePayloadViewToMessagePayloadResponseBody(v *shiritoriviews.MessagePayloadView) *MessagePayloadResponseBody {
	if v == nil {
		return nil
	}
	res := &MessagePayloadResponseBody{
		Message: *v.Message,
	}

	return res
}

// marshalMessagePayloadStreamingBodyToShiritoriMessagePayload builds a value
// of type *shiritori.MessagePayload from a value of type
// *MessagePayloadStreamingBody.
func marshalMessagePayloadStreamingBodyToShiritoriMessagePayload(v *MessagePayloadStreamingBody) *shiritori.MessagePayload {
	if v == nil {
		return nil
	}
	res := &shiritori.MessagePayload{
		Message: *v.Message,
	}

	return res
}

// marshalPostWordPayloadStreamingBodyToShiritoriPostWordPayload builds a value
// of type *shiritori.PostWordPayload from a value of type
// *PostWordPayloadStreamingBody.
func marshalPostWordPayloadStreamingBodyToShiritoriPostWordPayload(v *PostWordPayloadStreamingBody) *shiritori.PostWordPayload {
	if v == nil {
		return nil
	}
	res := &shiritori.PostWordPayload{
		Word:   *v.Word,
		Exists: *v.Exists,
		Hash:   *v.Hash,
	}

	return res
}
