// Code generated by goa v3.2.6, DO NOT EDIT.
//
// shiritori HTTP server types
//
// Command:
// $ goa gen shiritori/design

package server

import (
	shiritori "shiritori/gen/shiritori"
	shiritoriviews "shiritori/gen/shiritori/views"

	goa "goa.design/goa/v3/pkg"
)

// BattleStreamingBody is the type of the "shiritori" service "battle" endpoint
// HTTP request body.
type BattleStreamingBody BattlestreamingpayloadStreamingBody

// WordsResponseBody is the type of the "shiritori" service "words" endpoint
// HTTP response body.
type WordsResponseBody struct {
	Word   string `form:"word" json:"word" xml:"word"`
	Exists bool   `form:"exists" json:"exists" xml:"exists"`
	Hash   string `form:"hash" json:"hash" xml:"hash"`
}

// BattleResponseBody is the type of the "shiritori" service "battle" endpoint
// HTTP response body.
type BattleResponseBody struct {
	Type           string                      `form:"type" json:"type" xml:"type"`
	Timestamp      int64                       `form:"timestamp" json:"timestamp" xml:"timestamp"`
	MessagePayload *MessagePayloadResponseBody `form:"message_payload,omitempty" json:"message_payload,omitempty" xml:"message_payload,omitempty"`
}

// MessagePayloadResponseBody is used to define fields on response body types.
type MessagePayloadResponseBody struct {
	Message string `form:"message" json:"message" xml:"message"`
}

// BattlestreamingpayloadStreamingBody is used to define fields on request body
// types.
type BattlestreamingpayloadStreamingBody struct {
	Type           *string                      `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	MessagePayload *MessagePayloadStreamingBody `form:"message_payload,omitempty" json:"message_payload,omitempty" xml:"message_payload,omitempty"`
}

// MessagePayloadStreamingBody is used to define fields on request body types.
type MessagePayloadStreamingBody struct {
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// NewWordsResponseBody builds the HTTP response body from the result of the
// "words" endpoint of the "shiritori" service.
func NewWordsResponseBody(res *shiritoriviews.WordresultView) *WordsResponseBody {
	body := &WordsResponseBody{
		Word:   *res.Word,
		Exists: *res.Exists,
		Hash:   *res.Hash,
	}
	return body
}

// NewBattleResponseBody builds the HTTP response body from the result of the
// "battle" endpoint of the "shiritori" service.
func NewBattleResponseBody(res *shiritoriviews.BattlestreamingresultView) *BattleResponseBody {
	body := &BattleResponseBody{
		Type:      *res.Type,
		Timestamp: *res.Timestamp,
	}
	if res.MessagePayload != nil {
		body.MessagePayload = marshalShiritoriviewsMessagePayloadViewToMessagePayloadResponseBody(res.MessagePayload)
	}
	return body
}

// NewAddPayload builds a shiritori service add endpoint payload.
func NewAddPayload(a int, b int) *shiritori.AddPayload {
	v := &shiritori.AddPayload{}
	v.A = a
	v.B = b

	return v
}

// NewWordsPayload builds a shiritori service words endpoint payload.
func NewWordsPayload(word string) *shiritori.WordsPayload {
	v := &shiritori.WordsPayload{}
	v.Word = word

	return v
}

// NewBattlePayload builds a shiritori service battle endpoint payload.
func NewBattlePayload(battleID string) *shiritori.BattlePayload {
	v := &shiritori.BattlePayload{}
	v.BattleID = battleID

	return v
}

// NewBattleStreamingBody builds a shiritori service battle endpoint payload.
func NewBattleStreamingBody(body *BattleStreamingBody) *shiritori.Battlestreamingpayload {
	v := &shiritori.Battlestreamingpayload{}
	if body.Type != nil {
		v.Type = *body.Type
	}
	if body.MessagePayload != nil {
		v.MessagePayload = marshalMessagePayloadStreamingBodyToShiritoriMessagePayload(body.MessagePayload)
	}

	return v
}

// ValidateBattleStreamingBody runs the validations defined on
// BattleStreamingBody
func ValidateBattleStreamingBody(body *BattleStreamingBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "message" || *body.Type == "close" || *body.Type == "post_word") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{"message", "close", "post_word"}))
		}
	}
	if body.MessagePayload != nil {
		if err2 := ValidateMessagePayloadStreamingBody(body.MessagePayload); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateBattlestreamingpayloadStreamingBody runs the validations defined on
// BattlestreamingpayloadStreamingBody
func ValidateBattlestreamingpayloadStreamingBody(body *BattlestreamingpayloadStreamingBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "message" || *body.Type == "close" || *body.Type == "post_word") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{"message", "close", "post_word"}))
		}
	}
	if body.MessagePayload != nil {
		if err2 := ValidateMessagePayloadStreamingBody(body.MessagePayload); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateMessagePayloadStreamingBody runs the validations defined on
// MessagePayloadStreamingBody
func ValidateMessagePayloadStreamingBody(body *MessagePayloadStreamingBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}
