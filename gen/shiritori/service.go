// Code generated by goa v3.2.6, DO NOT EDIT.
//
// shiritori service
//
// Command:
// $ goa gen shiritori/design

package shiritori

import (
	"context"
	shiritoriviews "shiritori/gen/shiritori/views"
)

// The calc service performs operations on numbers
type Service interface {
	// Add implements add.
	Add(context.Context, *AddPayload) (res int, err error)
	// Battle implements battle.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "other"
	Battle(context.Context, *BattlePayload, BattleServerStream) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "shiritori"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"add", "battle"}

// BattleServerStream is the interface a "battle" endpoint server stream must
// satisfy.
type BattleServerStream interface {
	// Send streams instances of "Battleevent".
	Send(*Battleevent) error
	// Recv reads instances of "Battlemessage" from the stream.
	Recv() (*Battlemessage, error)
	// Close closes the stream.
	Close() error
	// SetView sets the view used to render the result before streaming.
	SetView(view string)
}

// BattleClientStream is the interface a "battle" endpoint client stream must
// satisfy.
type BattleClientStream interface {
	// Send streams instances of "Battlemessage".
	Send(*Battlemessage) error
	// Recv reads instances of "Battleevent" from the stream.
	Recv() (*Battleevent, error)
	// Close closes the stream.
	Close() error
}

// AddPayload is the payload type of the shiritori service add method.
type AddPayload struct {
	// Left operand
	A int
	// Right operand
	B int
}

// BattlePayload is the payload type of the shiritori service battle method.
type BattlePayload struct {
	BattleID string
}

// Battlemessage is the streaming payload type of the shiritori service battle
// method.
type Battlemessage struct {
	Type string
	Msg  *string
	Data *string
}

// Battleevent is the result type of the shiritori service battle method.
type Battleevent struct {
	BattleID *string
	Name     *string
	Param    *string
}

// NewBattleevent initializes result type Battleevent from viewed result type
// Battleevent.
func NewBattleevent(vres *shiritoriviews.Battleevent) *Battleevent {
	var res *Battleevent
	switch vres.View {
	case "default", "":
		res = newBattleevent(vres.Projected)
	case "other":
		res = newBattleeventOther(vres.Projected)
	}
	return res
}

// NewViewedBattleevent initializes viewed result type Battleevent from result
// type Battleevent using the given view.
func NewViewedBattleevent(res *Battleevent, view string) *shiritoriviews.Battleevent {
	var vres *shiritoriviews.Battleevent
	switch view {
	case "default", "":
		p := newBattleeventView(res)
		vres = &shiritoriviews.Battleevent{Projected: p, View: "default"}
	case "other":
		p := newBattleeventViewOther(res)
		vres = &shiritoriviews.Battleevent{Projected: p, View: "other"}
	}
	return vres
}

// newBattleevent converts projected type Battleevent to service type
// Battleevent.
func newBattleevent(vres *shiritoriviews.BattleeventView) *Battleevent {
	res := &Battleevent{
		BattleID: vres.BattleID,
		Name:     vres.Name,
	}
	return res
}

// newBattleeventOther converts projected type Battleevent to service type
// Battleevent.
func newBattleeventOther(vres *shiritoriviews.BattleeventView) *Battleevent {
	res := &Battleevent{
		BattleID: vres.BattleID,
		Name:     vres.Name,
		Param:    vres.Param,
	}
	return res
}

// newBattleeventView projects result type Battleevent to projected type
// BattleeventView using the "default" view.
func newBattleeventView(res *Battleevent) *shiritoriviews.BattleeventView {
	vres := &shiritoriviews.BattleeventView{
		BattleID: res.BattleID,
		Name:     res.Name,
	}
	return vres
}

// newBattleeventViewOther projects result type Battleevent to projected type
// BattleeventView using the "other" view.
func newBattleeventViewOther(res *Battleevent) *shiritoriviews.BattleeventView {
	vres := &shiritoriviews.BattleeventView{
		BattleID: res.BattleID,
		Name:     res.Name,
		Param:    res.Param,
	}
	return vres
}
