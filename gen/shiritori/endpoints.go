// Code generated by goa v3.2.6, DO NOT EDIT.
//
// shiritori endpoints
//
// Command:
// $ goa gen shiritori/design

package shiritori

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "shiritori" service endpoints.
type Endpoints struct {
	Add    goa.Endpoint
	Words  goa.Endpoint
	Battle goa.Endpoint
}

// BattleEndpointInput holds both the payload and the server stream of the
// "battle" method.
type BattleEndpointInput struct {
	// Payload is the method payload.
	Payload *BattlePayload
	// Stream is the server stream used by the "battle" method to send data.
	Stream BattleServerStream
}

// NewEndpoints wraps the methods of the "shiritori" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Add:    NewAddEndpoint(s),
		Words:  NewWordsEndpoint(s),
		Battle: NewBattleEndpoint(s),
	}
}

// Use applies the given middleware to all the "shiritori" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Add = m(e.Add)
	e.Words = m(e.Words)
	e.Battle = m(e.Battle)
}

// NewAddEndpoint returns an endpoint function that calls the method "add" of
// service "shiritori".
func NewAddEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AddPayload)
		return s.Add(ctx, p)
	}
}

// NewWordsEndpoint returns an endpoint function that calls the method "words"
// of service "shiritori".
func NewWordsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*WordsPayload)
		res, err := s.Words(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedWordresult(res, "default")
		return vres, nil
	}
}

// NewBattleEndpoint returns an endpoint function that calls the method
// "battle" of service "shiritori".
func NewBattleEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		ep := req.(*BattleEndpointInput)
		return nil, s.Battle(ctx, ep.Payload, ep.Stream)
	}
}
